--------------------------------Waits--------------------------------

****Implicit Wait****

	There is a second type of wait that is distinct from explicit wait called implicit wait. By implicitly waiting, WebDriver polls the DOM for a certain duration 
when trying to find any element. This can be useful when certain elements on the webpage are not available immediately and need some time to load.
	Implicit waiting for elements to appear is disabled by default and will need to be manually enabled on a per-session basis. Mixing explicit waits and implicit 
waits will cause unintended consequences, namely waits sleeping for the maximum time even if the element is available or condition is true.
	Warning: Do not mix implicit and explicit waits. Doing so can cause unpredictable wait times. For example, setting an implicit wait of 10 seconds and an 
explicit wait of 15 seconds could cause a timeout to occur after 20 seconds.
	An implicit wait is to tell WebDriver to poll the DOM for a certain amount of time when trying to find an element or elements if they are not immediately 
available. The default setting is 0, meaning disabled. Once set, the implicit wait is set for the life of the session.
driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
		
****Explicit Wait****

	Explicit waits are available to Selenium clients for imperative, procedural languages. They allow your code to halt program execution, or freeze the thread, 
until the condition you pass it resolves. The condition is called with a certain frequency until the timeout of the wait is elapsed. This means that for as 
long as the condition returns a falsy value, it will keep trying and waiting.
	Since explicit waits allow you to wait for a condition to occur, they make a good fit for synchronising the state between the browser and its DOM, and your 
WebDriver script.
	To remedy our buggy instruction set from earlier, we could employ a wait to have the findElement call wait until the dynamically added element from the 
script has been added to the DOM:

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement myLink = wait.until(ExpectedConditions.elementToBeClickable(By.partialLinkText("Automation Step by Step: Never Stop Learning ...")));
		myLink.click();
		
***Fluent Wait****

	FluentWait instance defines the maximum amount of time to wait for a condition, as well as the frequency with which to check the condition.
	Users may configure the wait to ignore specific types of exceptions whilst waiting, such as NoSuchElementException when searching for an element on the page.

		Wait<WebDriver> fluentWait = new FluentWait<WebDriver>(driver)
				.withTimeout(Duration.ofSeconds(10))
				.pollingEvery(Duration.ofSeconds(1))
				.ignoring(org.openqa.selenium.NoSuchElementException.class);
		
		fluentWait.until(ExpectedConditions.elementToBeClickable(By.xpath(null)));
		
		
--------------------------------Waits--------------------------------
Implicit
Explicit
Fluent
--------------------------------Proxy--------------------------------

	In computer networking, a proxy server is a server application that acts as an intermediary between a client requesting a resource and the server providing
that resource.

--------------------------------Page Loading Strategy--------------------------------
	Page Loading Strategy can be helpful to speed up the process of web automation 
	
	1.Normal
	This command will make the web driver wait until the complete page gets loaded and this wait is looking for the load event to be fired .by default if we 
are not providing anything this will apply.

		chromeOptions.setPageLoadStrategy(PageLoadStrategy.NORMAL);

	2.Eager
	If we are going to use Eager as a wait Strategy then webdriver will wait until the initial page gets loaded, this strategy won’t wait for loading of
stylesheets, images, and subframes, In this WebDriver waits until the DOMContentLoaded event fire is returned.

		chromeOptions.setPageLoadStrategy(PageLoadStrategy.EAGER);
	
	3.None
	In this wait, Webdriver waits for initial page to be loaded
	
		chromeOptions.setPageLoadStrategy(PageLoadStrategy.NONE);

--------------------------------Web Elements-------------------------------
[]*How to find element or elements

findElement()


findElements()
		//Get all the elements available with tag name 'select'
		List<WebElement> elements = driver.findElements(By.tagName("select"));
		
		for(WebElement element: elements) {
			System.out.println(element.getText());
		}

[]*How to get active element

activeElement()

		String attr = driver.switchTo().activeElement().getAttribute("title");
		System.out.println(attr);
		
[]*How to get element tagname, text, css

getTagName()
		String tagName = searchBox.getTagName();

getText()
		String text = searchBox.getText();

getCssValue()
		String cssValue = searchBox.getCssValue("font");
		
[]*How to check element is Enabled | is Selected

isEnabled()
isSelected()

--------------------------------How to simulate keyboard typing--------------------------------

sendKeys()

keyDown()

[]*How to release pressed keys

keyUp()

		actions.keyDown(Keys.SHIFT).sendKeys(searchBox,"selenium")
		.keyUp(Keys.SHIFT).sendKeys(" selenium").perform();
		
clear()

--------------------------------Mouse Actions--------------------------------

moveToElement()

clickAndHold()

contextClick()

doubleClick()

dragAndDrop(sourceEle, targetEle)

--------------------------------How to handle DropDown--------------------------------






























